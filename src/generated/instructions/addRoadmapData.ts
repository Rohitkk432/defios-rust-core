/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { RoadmapOutlook, roadmapOutlookBeet } from '../types/RoadmapOutlook'

/**
 * @category Instructions
 * @category AddRoadmapData
 * @category generated
 */
export type AddRoadmapDataInstructionArgs = {
  roadmapTitle: string
  roadmapDescriptionLink: string
  roadmapImageUrl: string
  roadmapOutlook: RoadmapOutlook
}
/**
 * @category Instructions
 * @category AddRoadmapData
 * @category generated
 */
export const addRoadmapDataStruct = new beet.FixableBeetArgsStruct<
  AddRoadmapDataInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['roadmapTitle', beet.utf8String],
    ['roadmapDescriptionLink', beet.utf8String],
    ['roadmapImageUrl', beet.utf8String],
    ['roadmapOutlook', roadmapOutlookBeet],
  ],
  'AddRoadmapDataInstructionArgs'
)
/**
 * Accounts required by the _addRoadmapData_ instruction
 *
 * @property [_writable_, **signer**] roadmapDataAdder
 * @property [_writable_] metadataAccount
 * @property [_writable_] repositoryAccount
 * @property [] roadmapVerifiedUser
 * @property [] nameRouterAccount
 * @property [] routerCreator
 * @category Instructions
 * @category AddRoadmapData
 * @category generated
 */
export type AddRoadmapDataInstructionAccounts = {
  roadmapDataAdder: web3.PublicKey
  metadataAccount: web3.PublicKey
  repositoryAccount: web3.PublicKey
  roadmapVerifiedUser: web3.PublicKey
  nameRouterAccount: web3.PublicKey
  routerCreator: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addRoadmapDataInstructionDiscriminator = [
  174, 151, 61, 213, 57, 59, 10, 35,
]

/**
 * Creates a _AddRoadmapData_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddRoadmapData
 * @category generated
 */
export function createAddRoadmapDataInstruction(
  accounts: AddRoadmapDataInstructionAccounts,
  args: AddRoadmapDataInstructionArgs,
  programId = new web3.PublicKey('7aDYtX4L9sRykPoo5mGAoKfDgjVMcWoo3D6B5AiUa99F')
) {
  const [data] = addRoadmapDataStruct.serialize({
    instructionDiscriminator: addRoadmapDataInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.roadmapDataAdder,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.metadataAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.repositoryAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.roadmapVerifiedUser,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.nameRouterAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.routerCreator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
