/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AddPr
 * @category generated
 */
export type AddPrInstructionArgs = {
  metadataUri: string
}
/**
 * @category Instructions
 * @category AddPr
 * @category generated
 */
export const addPrStruct = new beet.FixableBeetArgsStruct<
  AddPrInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['metadataUri', beet.utf8String],
  ],
  'AddPrInstructionArgs'
)
/**
 * Accounts required by the _addPr_ instruction
 *
 * @property [_writable_, **signer**] pullRequestAddr
 * @property [_writable_] issue
 * @property [_writable_] pullRequestMetadataAccount
 * @property [] pullRequestVerifiedUser
 * @property [_writable_] pullRequestTokenAccount
 * @property [] nameRouterAccount
 * @property [] routerCreator
 * @property [_writable_] rewardsMint
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category AddPr
 * @category generated
 */
export type AddPrInstructionAccounts = {
  pullRequestAddr: web3.PublicKey
  issue: web3.PublicKey
  pullRequestMetadataAccount: web3.PublicKey
  pullRequestVerifiedUser: web3.PublicKey
  pullRequestTokenAccount: web3.PublicKey
  nameRouterAccount: web3.PublicKey
  routerCreator: web3.PublicKey
  rewardsMint: web3.PublicKey
  systemProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addPrInstructionDiscriminator = [35, 20, 64, 162, 171, 49, 91, 3]

/**
 * Creates a _AddPr_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddPr
 * @category generated
 */
export function createAddPrInstruction(
  accounts: AddPrInstructionAccounts,
  args: AddPrInstructionArgs,
  programId = new web3.PublicKey('7aDYtX4L9sRykPoo5mGAoKfDgjVMcWoo3D6B5AiUa99F')
) {
  const [data] = addPrStruct.serialize({
    instructionDiscriminator: addPrInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.pullRequestAddr,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.issue,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.pullRequestMetadataAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.pullRequestVerifiedUser,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.pullRequestTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.nameRouterAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.routerCreator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardsMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
