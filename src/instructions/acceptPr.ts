/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AcceptPr
 * @category generated
 */
export type AcceptPrInstructionArgs = {
  repoName: string
}
/**
 * @category Instructions
 * @category AcceptPr
 * @category generated
 */
export const acceptPrStruct = new beet.FixableBeetArgsStruct<
  AcceptPrInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['repoName', beet.utf8String],
  ],
  'AcceptPrInstructionArgs'
)
/**
 * Accounts required by the _acceptPr_ instruction
 *
 * @property [_writable_, **signer**] repositoryCreator
 * @property [_writable_] pullRequestAddr
 * @property [] repositoryAccount
 * @property [_writable_] issue
 * @property [_writable_] pullRequestMetadataAccount
 * @category Instructions
 * @category AcceptPr
 * @category generated
 */
export type AcceptPrInstructionAccounts = {
  repositoryCreator: web3.PublicKey
  pullRequestAddr: web3.PublicKey
  repositoryAccount: web3.PublicKey
  issue: web3.PublicKey
  pullRequestMetadataAccount: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const acceptPrInstructionDiscriminator = [
  86, 174, 71, 251, 213, 234, 20, 184,
]

/**
 * Creates a _AcceptPr_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AcceptPr
 * @category generated
 */
export function createAcceptPrInstruction(
  accounts: AcceptPrInstructionAccounts,
  args: AcceptPrInstructionArgs,
  programId = new web3.PublicKey('7aDYtX4L9sRykPoo5mGAoKfDgjVMcWoo3D6B5AiUa99F')
) {
  const [data] = acceptPrStruct.serialize({
    instructionDiscriminator: acceptPrInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.repositoryCreator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.pullRequestAddr,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.repositoryAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.issue,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.pullRequestMetadataAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
