/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category AddCommit
 * @category generated
 */
export type AddCommitInstructionArgs = {
  commitHash: string;
  treeHash: string;
  metadataUri: string;
};
/**
 * @category Instructions
 * @category AddCommit
 * @category generated
 */
export const addCommitStruct = new beet.FixableBeetArgsStruct<
  AddCommitInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["commitHash", beet.utf8String],
    ["treeHash", beet.utf8String],
    ["metadataUri", beet.utf8String],
  ],
  "AddCommitInstructionArgs"
);
/**
 * Accounts required by the _addCommit_ instruction
 *
 * @property [] routerCreator
 * @property [] nameRouterAccount
 * @property [] repositoryCreator
 * @property [] issueCreator
 * @property [] repositoryAccount
 * @property [_writable_] issueAccount
 * @property [_writable_, **signer**] commitCreator
 * @property [] commitVerifiedUser
 * @property [_writable_] commitAccount
 * @category Instructions
 * @category AddCommit
 * @category generated
 */
export type AddCommitInstructionAccounts = {
  routerCreator: web3.PublicKey;
  nameRouterAccount: web3.PublicKey;
  repositoryCreator: web3.PublicKey;
  issueCreator: web3.PublicKey;
  repositoryAccount: web3.PublicKey;
  issueAccount: web3.PublicKey;
  commitCreator: web3.PublicKey;
  commitVerifiedUser: web3.PublicKey;
  commitAccount: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const addCommitInstructionDiscriminator = [
  204, 58, 170, 63, 60, 94, 236, 255,
];

/**
 * Creates a _AddCommit_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddCommit
 * @category generated
 */
export function createAddCommitInstruction(
  accounts: AddCommitInstructionAccounts,
  args: AddCommitInstructionArgs,
  programId = new web3.PublicKey("7aDYtX4L9sRykPoo5mGAoKfDgjVMcWoo3D6B5AiUa99F")
) {
  const [data] = addCommitStruct.serialize({
    instructionDiscriminator: addCommitInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.routerCreator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.nameRouterAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.repositoryCreator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.issueCreator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.repositoryAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.issueAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.commitCreator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.commitVerifiedUser,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.commitAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
