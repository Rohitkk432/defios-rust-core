/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category SellTokens
 * @category generated
 */
export type SellTokensInstructionArgs = {
  usdcAmount: beet.bignum
  numberOfTokens: beet.bignum
}
/**
 * @category Instructions
 * @category SellTokens
 * @category generated
 */
export const sellTokensStruct = new beet.BeetArgsStruct<
  SellTokensInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['usdcAmount', beet.u64],
    ['numberOfTokens', beet.u64],
  ],
  'SellTokensInstructionArgs'
)
/**
 * Accounts required by the _sellTokens_ instruction
 *
 * @property [_writable_, **signer**] seller
 * @property [_writable_] communalDeposit
 * @property [_writable_] communalTokenAccount
 * @property [_writable_] communalUsdcAccount
 * @property [_writable_] sellerTokenAccount
 * @property [_writable_] repositoryAccount
 * @property [_writable_] sellerUsdcAccount
 * @property [_writable_] rewardsMint
 * @property [] usdcMint
 * @property [] defaultSchedule
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category SellTokens
 * @category generated
 */
export type SellTokensInstructionAccounts = {
  seller: web3.PublicKey
  communalDeposit: web3.PublicKey
  communalTokenAccount: web3.PublicKey
  communalUsdcAccount: web3.PublicKey
  sellerTokenAccount: web3.PublicKey
  repositoryAccount: web3.PublicKey
  sellerUsdcAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rewardsMint: web3.PublicKey
  usdcMint: web3.PublicKey
  defaultSchedule: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const sellTokensInstructionDiscriminator = [
  114, 242, 25, 12, 62, 126, 92, 2,
]

/**
 * Creates a _SellTokens_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SellTokens
 * @category generated
 */
export function createSellTokensInstruction(
  accounts: SellTokensInstructionAccounts,
  args: SellTokensInstructionArgs,
  programId = new web3.PublicKey('7aDYtX4L9sRykPoo5mGAoKfDgjVMcWoo3D6B5AiUa99F')
) {
  const [data] = sellTokensStruct.serialize({
    instructionDiscriminator: sellTokensInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.seller,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.communalDeposit,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.communalTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.communalUsdcAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.sellerTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.repositoryAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.sellerUsdcAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardsMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.usdcMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.defaultSchedule,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
