/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import { Schedule, scheduleBeet } from "../types/Schedule";

/**
 * Arguments used to create {@link VestingSchedule}
 * @category Accounts
 * @category generated
 */
export type VestingScheduleArgs = {
  bump: number;
  destinationAddress: web3.PublicKey;
  mintAddress: web3.PublicKey;
  schedules: Schedule[];
};

export const vestingScheduleDiscriminator = [
  130, 200, 173, 148, 39, 75, 243, 147,
];
/**
 * Holds the data for the {@link VestingSchedule} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class VestingSchedule implements VestingScheduleArgs {
  private constructor(
    readonly bump: number,
    readonly destinationAddress: web3.PublicKey,
    readonly mintAddress: web3.PublicKey,
    readonly schedules: Schedule[]
  ) {}

  /**
   * Creates a {@link VestingSchedule} instance from the provided args.
   */
  static fromArgs(args: VestingScheduleArgs) {
    return new VestingSchedule(
      args.bump,
      args.destinationAddress,
      args.mintAddress,
      args.schedules
    );
  }

  /**
   * Deserializes the {@link VestingSchedule} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [VestingSchedule, number] {
    return VestingSchedule.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link VestingSchedule} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<VestingSchedule> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find VestingSchedule account at ${address}`);
    }
    return VestingSchedule.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "7aDYtX4L9sRykPoo5mGAoKfDgjVMcWoo3D6B5AiUa99F"
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, vestingScheduleBeet);
  }

  /**
   * Deserializes the {@link VestingSchedule} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [VestingSchedule, number] {
    return vestingScheduleBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link VestingSchedule} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return vestingScheduleBeet.serialize({
      accountDiscriminator: vestingScheduleDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link VestingSchedule} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: VestingScheduleArgs) {
    const instance = VestingSchedule.fromArgs(args);
    return vestingScheduleBeet.toFixedFromValue({
      accountDiscriminator: vestingScheduleDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link VestingSchedule} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: VestingScheduleArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      VestingSchedule.byteSize(args),
      commitment
    );
  }

  /**
   * Returns a readable version of {@link VestingSchedule} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      destinationAddress: this.destinationAddress.toBase58(),
      mintAddress: this.mintAddress.toBase58(),
      schedules: this.schedules,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const vestingScheduleBeet = new beet.FixableBeetStruct<
  VestingSchedule,
  VestingScheduleArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["bump", beet.u8],
    ["destinationAddress", beetSolana.publicKey],
    ["mintAddress", beetSolana.publicKey],
    ["schedules", beet.array(scheduleBeet)],
  ],
  VestingSchedule.fromArgs,
  "VestingSchedule"
);
