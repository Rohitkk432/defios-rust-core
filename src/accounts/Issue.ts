/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link Issue}
 * @category Accounts
 * @category generated
 */
export type IssueArgs = {
  bump: number
  index: beet.bignum
  issueCreator: web3.PublicKey
  issueTokenPoolAccount: web3.PublicKey
  repository: web3.PublicKey
  commitIndex: beet.bignum
  createdAt: beet.bignum
  closedAt: beet.COption<beet.bignum>
  uri: string
}

export const issueDiscriminator = [171, 193, 204, 62, 63, 166, 106, 255]
/**
 * Holds the data for the {@link Issue} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Issue implements IssueArgs {
  private constructor(
    readonly bump: number,
    readonly index: beet.bignum,
    readonly issueCreator: web3.PublicKey,
    readonly issueTokenPoolAccount: web3.PublicKey,
    readonly repository: web3.PublicKey,
    readonly commitIndex: beet.bignum,
    readonly createdAt: beet.bignum,
    readonly closedAt: beet.COption<beet.bignum>,
    readonly uri: string
  ) {}

  /**
   * Creates a {@link Issue} instance from the provided args.
   */
  static fromArgs(args: IssueArgs) {
    return new Issue(
      args.bump,
      args.index,
      args.issueCreator,
      args.issueTokenPoolAccount,
      args.repository,
      args.commitIndex,
      args.createdAt,
      args.closedAt,
      args.uri
    )
  }

  /**
   * Deserializes the {@link Issue} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Issue, number] {
    return Issue.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Issue} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Issue> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Issue account at ${address}`)
    }
    return Issue.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '7aDYtX4L9sRykPoo5mGAoKfDgjVMcWoo3D6B5AiUa99F'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, issueBeet)
  }

  /**
   * Deserializes the {@link Issue} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Issue, number] {
    return issueBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Issue} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return issueBeet.serialize({
      accountDiscriminator: issueDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Issue} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: IssueArgs) {
    const instance = Issue.fromArgs(args)
    return issueBeet.toFixedFromValue({
      accountDiscriminator: issueDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Issue} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: IssueArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Issue.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Issue} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      index: (() => {
        const x = <{ toNumber: () => number }>this.index
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      issueCreator: this.issueCreator.toBase58(),
      issueTokenPoolAccount: this.issueTokenPoolAccount.toBase58(),
      repository: this.repository.toBase58(),
      commitIndex: (() => {
        const x = <{ toNumber: () => number }>this.commitIndex
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      createdAt: (() => {
        const x = <{ toNumber: () => number }>this.createdAt
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      closedAt: this.closedAt,
      uri: this.uri,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const issueBeet = new beet.FixableBeetStruct<
  Issue,
  IssueArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['index', beet.u64],
    ['issueCreator', beetSolana.publicKey],
    ['issueTokenPoolAccount', beetSolana.publicKey],
    ['repository', beetSolana.publicKey],
    ['commitIndex', beet.u64],
    ['createdAt', beet.u64],
    ['closedAt', beet.coption(beet.u64)],
    ['uri', beet.utf8String],
  ],
  Issue.fromArgs,
  'Issue'
)
