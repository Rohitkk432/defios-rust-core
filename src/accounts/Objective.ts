/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import { ObjectiveState, objectiveStateBeet } from "../types/ObjectiveState";
import {
  ObjectiveDeliverable,
  objectiveDeliverableBeet,
} from "../types/ObjectiveDeliverable";

/**
 * Arguments used to create {@link Objective}
 * @category Accounts
 * @category generated
 */
export type ObjectiveArgs = {
  bump: number;
  objectiveTitle: string;
  objectiveCreationUnix: beet.bignum;
  objectiveCreatorId: web3.PublicKey;
  objectiveStartUnix: beet.bignum;
  objectiveEndUnix: beet.COption<beet.bignum>;
  objectiveDescriptionLink: string;
  objectiveState: ObjectiveState;
  childrenObjectiveKeys: web3.PublicKey[];
  objectiveDeliverable: ObjectiveDeliverable;
  objectiveIssue: web3.PublicKey;
  objectiveId: string;
  objectiveRepository: web3.PublicKey;
};

export const objectiveDiscriminator = [167, 41, 90, 3, 203, 55, 34, 21];
/**
 * Holds the data for the {@link Objective} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Objective implements ObjectiveArgs {
  private constructor(
    readonly bump: number,
    readonly objectiveTitle: string,
    readonly objectiveCreationUnix: beet.bignum,
    readonly objectiveCreatorId: web3.PublicKey,
    readonly objectiveStartUnix: beet.bignum,
    readonly objectiveEndUnix: beet.COption<beet.bignum>,
    readonly objectiveDescriptionLink: string,
    readonly objectiveState: ObjectiveState,
    readonly childrenObjectiveKeys: web3.PublicKey[],
    readonly objectiveDeliverable: ObjectiveDeliverable,
    readonly objectiveIssue: web3.PublicKey,
    readonly objectiveId: string,
    readonly objectiveRepository: web3.PublicKey
  ) {}

  /**
   * Creates a {@link Objective} instance from the provided args.
   */
  static fromArgs(args: ObjectiveArgs) {
    return new Objective(
      args.bump,
      args.objectiveTitle,
      args.objectiveCreationUnix,
      args.objectiveCreatorId,
      args.objectiveStartUnix,
      args.objectiveEndUnix,
      args.objectiveDescriptionLink,
      args.objectiveState,
      args.childrenObjectiveKeys,
      args.objectiveDeliverable,
      args.objectiveIssue,
      args.objectiveId,
      args.objectiveRepository
    );
  }

  /**
   * Deserializes the {@link Objective} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Objective, number] {
    return Objective.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Objective} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Objective> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find Objective account at ${address}`);
    }
    return Objective.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "7aDYtX4L9sRykPoo5mGAoKfDgjVMcWoo3D6B5AiUa99F"
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, objectiveBeet);
  }

  /**
   * Deserializes the {@link Objective} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Objective, number] {
    return objectiveBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Objective} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return objectiveBeet.serialize({
      accountDiscriminator: objectiveDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Objective} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ObjectiveArgs) {
    const instance = Objective.fromArgs(args);
    return objectiveBeet.toFixedFromValue({
      accountDiscriminator: objectiveDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Objective} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ObjectiveArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Objective.byteSize(args),
      commitment
    );
  }

  /**
   * Returns a readable version of {@link Objective} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      objectiveTitle: this.objectiveTitle,
      objectiveCreationUnix: (() => {
        const x = <{ toNumber: () => number }>this.objectiveCreationUnix;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      objectiveCreatorId: this.objectiveCreatorId.toBase58(),
      objectiveStartUnix: (() => {
        const x = <{ toNumber: () => number }>this.objectiveStartUnix;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      objectiveEndUnix: this.objectiveEndUnix,
      objectiveDescriptionLink: this.objectiveDescriptionLink,
      objectiveState: "ObjectiveState." + ObjectiveState[this.objectiveState],
      childrenObjectiveKeys: this.childrenObjectiveKeys,
      objectiveDeliverable:
        "ObjectiveDeliverable." +
        ObjectiveDeliverable[this.objectiveDeliverable],
      objectiveIssue: this.objectiveIssue.toBase58(),
      objectiveId: this.objectiveId,
      objectiveRepository: this.objectiveRepository.toBase58(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const objectiveBeet = new beet.FixableBeetStruct<
  Objective,
  ObjectiveArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["bump", beet.u8],
    ["objectiveTitle", beet.utf8String],
    ["objectiveCreationUnix", beet.i64],
    ["objectiveCreatorId", beetSolana.publicKey],
    ["objectiveStartUnix", beet.i64],
    ["objectiveEndUnix", beet.coption(beet.i64)],
    ["objectiveDescriptionLink", beet.utf8String],
    ["objectiveState", objectiveStateBeet],
    ["childrenObjectiveKeys", beet.array(beetSolana.publicKey)],
    ["objectiveDeliverable", objectiveDeliverableBeet],
    ["objectiveIssue", beetSolana.publicKey],
    ["objectiveId", beet.utf8String],
    ["objectiveRepository", beetSolana.publicKey],
  ],
  Objective.fromArgs,
  "Objective"
);
