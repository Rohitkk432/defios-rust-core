/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";
import { Schedule, scheduleBeet } from "../types/Schedule";

/**
 * @category Instructions
 * @category ChangeVestingSchedule
 * @category generated
 */
export type ChangeVestingScheduleInstructionArgs = {
  newVestingSchedule: Schedule[];
};
/**
 * @category Instructions
 * @category ChangeVestingSchedule
 * @category generated
 */
export const changeVestingScheduleStruct = new beet.FixableBeetArgsStruct<
  ChangeVestingScheduleInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["newVestingSchedule", beet.array(scheduleBeet)],
  ],
  "ChangeVestingScheduleInstructionArgs"
);
/**
 * Accounts required by the _changeVestingSchedule_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [_writable_] repositoryAccount
 * @property [_writable_] vestingSchedule
 * @category Instructions
 * @category ChangeVestingSchedule
 * @category generated
 */
export type ChangeVestingScheduleInstructionAccounts = {
  authority: web3.PublicKey;
  repositoryAccount: web3.PublicKey;
  vestingSchedule: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const changeVestingScheduleInstructionDiscriminator = [
  176, 109, 2, 47, 181, 78, 12, 252,
];

/**
 * Creates a _ChangeVestingSchedule_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ChangeVestingSchedule
 * @category generated
 */
export function createChangeVestingScheduleInstruction(
  accounts: ChangeVestingScheduleInstructionAccounts,
  args: ChangeVestingScheduleInstructionArgs,
  programId = new web3.PublicKey("7aDYtX4L9sRykPoo5mGAoKfDgjVMcWoo3D6B5AiUa99F")
) {
  const [data] = changeVestingScheduleStruct.serialize({
    instructionDiscriminator: changeVestingScheduleInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.repositoryAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vestingSchedule,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
