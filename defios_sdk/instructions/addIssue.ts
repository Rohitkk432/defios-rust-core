/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category AddIssue
 * @category generated
 */
export type AddIssueInstructionArgs = {
  uri: string;
};
/**
 * @category Instructions
 * @category AddIssue
 * @category generated
 */
export const addIssueStruct = new beet.FixableBeetArgsStruct<
  AddIssueInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["uri", beet.utf8String],
  ],
  "AddIssueInstructionArgs"
);
/**
 * Accounts required by the _addIssue_ instruction
 *
 * @property [_writable_, **signer**] issueCreator
 * @property [] routerCreator
 * @property [] repositoryCreator
 * @property [] issueVerifiedUser
 * @property [] nameRouterAccount
 * @property [_writable_] repositoryAccount
 * @property [_writable_] issueAccount
 * @property [_writable_] issueTokenPoolAccount
 * @property [_writable_] rewardsMint
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category AddIssue
 * @category generated
 */
export type AddIssueInstructionAccounts = {
  issueCreator: web3.PublicKey;
  routerCreator: web3.PublicKey;
  repositoryCreator: web3.PublicKey;
  issueVerifiedUser: web3.PublicKey;
  nameRouterAccount: web3.PublicKey;
  repositoryAccount: web3.PublicKey;
  issueAccount: web3.PublicKey;
  issueTokenPoolAccount: web3.PublicKey;
  rewardsMint: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  associatedTokenProgram: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const addIssueInstructionDiscriminator = [
  200, 5, 11, 179, 100, 248, 56, 111,
];

/**
 * Creates a _AddIssue_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddIssue
 * @category generated
 */
export function createAddIssueInstruction(
  accounts: AddIssueInstructionAccounts,
  args: AddIssueInstructionArgs,
  programId = new web3.PublicKey("7aDYtX4L9sRykPoo5mGAoKfDgjVMcWoo3D6B5AiUa99F")
) {
  const [data] = addIssueStruct.serialize({
    instructionDiscriminator: addIssueInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.issueCreator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.routerCreator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.repositoryCreator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.issueVerifiedUser,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.nameRouterAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.repositoryAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.issueAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.issueTokenPoolAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardsMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
