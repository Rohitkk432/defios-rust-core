/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";
import * as beetSolana from "@metaplex-foundation/beet-solana";

/**
 * Arguments used to create {@link Repository}
 * @category Accounts
 * @category generated
 */
export type RepositoryArgs = {
  bump: number;
  issueIndex: beet.bignum;
  nameRouter: web3.PublicKey;
  repositoryCreator: web3.PublicKey;
  rewardsMint: beet.COption<web3.PublicKey>;
  id: string;
  description: string;
  uri: string;
  vestingSchedule: beet.COption<web3.PublicKey>;
};

export const repositoryDiscriminator = [100, 130, 92, 39, 250, 203, 126, 170];
/**
 * Holds the data for the {@link Repository} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Repository implements RepositoryArgs {
  private constructor(
    readonly bump: number,
    readonly issueIndex: beet.bignum,
    readonly nameRouter: web3.PublicKey,
    readonly repositoryCreator: web3.PublicKey,
    readonly rewardsMint: beet.COption<web3.PublicKey>,
    readonly id: string,
    readonly description: string,
    readonly uri: string,
    readonly vestingSchedule: beet.COption<web3.PublicKey>
  ) {}

  /**
   * Creates a {@link Repository} instance from the provided args.
   */
  static fromArgs(args: RepositoryArgs) {
    return new Repository(
      args.bump,
      args.issueIndex,
      args.nameRouter,
      args.repositoryCreator,
      args.rewardsMint,
      args.id,
      args.description,
      args.uri,
      args.vestingSchedule
    );
  }

  /**
   * Deserializes the {@link Repository} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Repository, number] {
    return Repository.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Repository} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Repository> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find Repository account at ${address}`);
    }
    return Repository.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "7aDYtX4L9sRykPoo5mGAoKfDgjVMcWoo3D6B5AiUa99F"
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, repositoryBeet);
  }

  /**
   * Deserializes the {@link Repository} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Repository, number] {
    return repositoryBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Repository} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return repositoryBeet.serialize({
      accountDiscriminator: repositoryDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Repository} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: RepositoryArgs) {
    const instance = Repository.fromArgs(args);
    return repositoryBeet.toFixedFromValue({
      accountDiscriminator: repositoryDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Repository} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: RepositoryArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Repository.byteSize(args),
      commitment
    );
  }

  /**
   * Returns a readable version of {@link Repository} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      issueIndex: (() => {
        const x = <{ toNumber: () => number }>this.issueIndex;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      nameRouter: this.nameRouter.toBase58(),
      repositoryCreator: this.repositoryCreator.toBase58(),
      rewardsMint: this.rewardsMint,
      id: this.id,
      description: this.description,
      uri: this.uri,
      vestingSchedule: this.vestingSchedule,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const repositoryBeet = new beet.FixableBeetStruct<
  Repository,
  RepositoryArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["bump", beet.u8],
    ["issueIndex", beet.u64],
    ["nameRouter", beetSolana.publicKey],
    ["repositoryCreator", beetSolana.publicKey],
    ["rewardsMint", beet.coption(beetSolana.publicKey)],
    ["id", beet.utf8String],
    ["description", beet.utf8String],
    ["uri", beet.utf8String],
    ["vestingSchedule", beet.coption(beetSolana.publicKey)],
  ],
  Repository.fromArgs,
  "Repository"
);
